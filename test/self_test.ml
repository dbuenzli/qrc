(*---------------------------------------------------------------------------
   Copyright (c) 2020 The qrc programmers. All rights reserved.
   SPDX-License-Identifier: ISC
  ---------------------------------------------------------------------------*)

(* One matrix is generated per QR code version/ec level. The standard
   has no test vectors and most QR code encoders out there seem to
   disagree on their outputs, so this only tests the implementation
   against new versions of itself. *)

let strf = Printf.sprintf
let pr = Printf.printf

let random_init seed =
  let seed = match seed with
  | Some seed -> seed | None -> Random.self_init (); Random.int 10000
  in
  Random.init seed; seed

let random_data () =
  let max = Qrc.Prop.mode_capacity (`V 40) `L `Byte in
  let b = Bytes.create max in
  for i = 0 to max - 1 do Bytes.set b i (Char.chr (Random.int 256)) done;
  Bytes.unsafe_to_string b

let matrix_to_string m =
  let bytes = Qrc.Matrix.bits m in
  let b = Bytes.create (Bigarray.Array1.dim bytes) in
  let get bits i = Char.chr (Bigarray.Array1.get bits i)in
  for i = 0 to Bytes.length b - 1 do Bytes.set b i (get bytes i) done;
  Bytes.unsafe_to_string b

let fold_all_qrs f acc data =
  let acc = ref acc in
  for v = 1 to 40 do
    let gen version ec_level =
      let mode = `Byte in
      let max_len = Qrc.Prop.mode_capacity version ec_level mode in
      let data = String.sub data 0 max_len in
      let m = Option.get @@ Qrc.encode ~version ~ec_level ~mode data in
      acc := f !acc ~version ~ec_level m
    in
    List.iter (gen (`V v)) [ `L; `M; `Q; `H ]
  done;
  !acc

let gen data =
  let f acc ~version ~ec_level:e m =
    let m = matrix_to_string m in
    if e = `L then pr "[|\n"; pr "%S;\n" m; if e = `H then pr "|];\n"
  in
  pr "(* Self test vectors, generated by self_test.ml *)\n";
  pr "let version = [|\n"; fold_all_qrs f () data; pr "|]\n"

let test data =
  let f exit ~version:(`V version) ~ec_level:ec m =
    let ec_idx = match ec with `L -> 0 | `M -> 1 | `Q -> 2 | `H -> 3 in
    let test = Self_vecs.version.(version - 1).(ec_idx) in
    if test = (matrix_to_string m) then exit else
    (pr "Mismatch error: version %d ec_level: %d\n" version ec_idx; 1)
  in
  let exit = fold_all_qrs f 0 data in
  (if exit = 0 then pr "Success!\n" else pr "Failure!\n");
  exit

let test action =
  let _seed = random_init (Some 1031) in
  let data = random_data () in
  match action with
  | `Gen -> gen data; 0
  | `Test when Array.length Self_vecs.version = 40 -> test data
  | `Test  ->
      Printf.eprintf
        "No self test vectors, rebuild or generate them with:\n\
         self_test --gen > self_vecs.ml\n%!";
      1

let main () =
  let usage = "Usage: self_test [--gen]" in
  let action = ref `Test in
  let args =
    [ "--gen", Arg.Unit (fun () -> action := `Gen),
      "Generate vectors on stdout (write them to self_vecs.ml)"; ]
  in
  let fail_pos s = raise (Arg.Bad (strf "Don't know what to do with %S" s)) in
  Arg.parse args fail_pos usage;
  exit (test !action)

let () = if !Sys.interactive then () else main ()
